   Compiling aoc v0.1.0 (/home/sergio/Desktop/AdventOfCode/2021/src/day23)
error[E0308]: mismatched types
  --> src/bin/two.rs:81:59
   |
81 |                     result.append(&mut self.move_amphipod((x,y), delta, true).into_iter().map( |x| x.1 ).collect())
   |                                                           ^^^^^ expected struct `Coord`, found tuple
   |
   = note: expected struct `Coord`
               found tuple `(usize, usize)`

error[E0308]: mismatched types
  --> src/bin/two.rs:81:66
   |
81 |                     result.append(&mut self.move_amphipod((x,y), delta, true).into_iter().map( |x| x.1 ).collect())
   |                                                                  ^^^^^ expected struct `Coord`, found tuple
   |
   = note: expected struct `Coord`
               found tuple `({integer}, {integer})`

error[E0369]: cannot add `Coord` to `Coord`
   --> src/bin/two.rs:93:34
    |
93  |         match &self.burrow[which + delta] {
    |                            ----- ^ ----- Coord
    |                            |
    |                            Coord
    |
note: an implementation of `Add<_>` might be missing for `Coord`
   --> src/bin/two.rs:6:1
    |
6   | struct Coord(i32, i32);
    | ^^^^^^^^^^^^^^^^^^^^^^^ must implement `Add<_>`
note: the following trait must be implemented
   --> /home/sergio/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/arith.rs:100:1
    |
100 | / pub trait Add<Rhs = Self> {
101 | |     /// The resulting type after applying the `+` operator.
102 | |     #[stable(feature = "rust1", since = "1.0.0")]
103 | |     type Output;
...   |
114 | |     fn add(self, rhs: Rhs) -> Self::Output;
115 | | }
    | |_^

error[E0369]: binary operation `==` cannot be applied to type `Coord`
  --> src/bin/two.rs:97:18
   |
97 |         if delta == (0,1) && which.1 == 1 {
   |            ----- ^^ ----- ({integer}, {integer})
   |            |
   |            Coord
   |
note: an implementation of `PartialEq<_>` might be missing for `Coord`
  --> src/bin/two.rs:6:1
   |
6  | struct Coord(i32, i32);
   | ^^^^^^^^^^^^^^^^^^^^^^^ must implement `PartialEq<_>`
help: consider annotating `Coord` with `#[derive(PartialEq)]`
   |
6  | #[derive(PartialEq)]
   |

error[E0277]: the type `[String]` cannot be indexed by `i32`
  --> src/bin/two.rs:98:34
   |
98 |             if which.0 != match &self.burrow[which.1][which.0..which.0+1] {
   |                                  ^^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`
   |
   = help: the trait `SliceIndex<[String]>` is not implemented for `i32`
   = help: the trait `SliceIndex<[T]>` is implemented for `usize`
   = note: required because of the requirements on the impl of `Index<i32>` for `[String]`

error[E0277]: the type `[String]` cannot be indexed by `i32`
   --> src/bin/two.rs:105:17
    |
105 | ...   if &self.burrow[which.1 + 2][which.0..which.0+1] != "." && self.burrow[which.1 + 2][which.0..which.0+1] != self.burrow[which.1][whi...
    |           ^^^^^^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`
    |
    = help: the trait `SliceIndex<[String]>` is not implemented for `i32`
    = help: the trait `SliceIndex<[T]>` is implemented for `usize`
    = note: required because of the requirements on the impl of `Index<i32>` for `[String]`

error[E0277]: the type `[String]` cannot be indexed by `i32`
   --> src/bin/two.rs:105:72
    |
105 | ...ch.0..which.0+1] != "." && self.burrow[which.1 + 2][which.0..which.0+1] != self.burrow[which.1][which.0..which.0+1] { return result; }
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`
    |
    = help: the trait `SliceIndex<[String]>` is not implemented for `i32`
    = help: the trait `SliceIndex<[T]>` is implemented for `usize`
    = note: required because of the requirements on the impl of `Index<i32>` for `[String]`

error[E0277]: the type `[String]` cannot be indexed by `i32`
   --> src/bin/two.rs:105:120
    |
105 | ... + 2][which.0..which.0+1] != self.burrow[which.1][which.0..which.0+1] { return result; }
    |                                 ^^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`
    |
    = help: the trait `SliceIndex<[String]>` is not implemented for `i32`
    = help: the trait `SliceIndex<[T]>` is implemented for `usize`
    = note: required because of the requirements on the impl of `Index<i32>` for `[String]`

error[E0308]: mismatched types
   --> src/bin/two.rs:106:51
    |
106 |             let maybe = self.move_amphipod(which, (0,2), test_hallway_start);
    |                                                   ^^^^^ expected struct `Coord`, found tuple
    |
    = note: expected struct `Coord`
                found tuple `({integer}, {integer})`

error[E0369]: binary operation `==` cannot be applied to type `Coord`
   --> src/bin/two.rs:109:18
    |
109 |         if delta == (0,-1) && which.1 == 3 {
    |            ----- ^^ ------ ({integer}, {integer})
    |            |
    |            Coord
    |
note: an implementation of `PartialEq<_>` might be missing for `Coord`
   --> src/bin/two.rs:6:1
    |
6   | struct Coord(i32, i32);
    | ^^^^^^^^^^^^^^^^^^^^^^^ must implement `PartialEq<_>`
help: consider annotating `Coord` with `#[derive(PartialEq)]`
    |
6   | #[derive(PartialEq)]
    |

error[E0308]: mismatched types
   --> src/bin/two.rs:110:51
    |
110 |             let maybe = self.move_amphipod(which, (0,-2), test_hallway_start);
    |                                                   ^^^^^^ expected struct `Coord`, found tuple
    |
    = note: expected struct `Coord`
                found tuple `({integer}, {integer})`

error[E0308]: mismatched types
   --> src/bin/two.rs:113:40
    |
113 |         let next = self._move_amphipod(which, ((which.0 as i32 + delta.0) as usize, (which.1 as i32 + delta.1) as usize));
    |                                        ^^^^^ expected tuple, found struct `Coord`
    |
    = note: expected tuple `(usize, usize)`
              found struct `Coord`

error[E0308]: mismatched types
   --> src/bin/two.rs:116:13
    |
115 |         match delta {
    |               ----- this expression has type `Coord`
116 |             (1,0) | (-1, 0) => {
    |             ^^^^^ expected struct `Coord`, found tuple
    |
    = note: expected struct `Coord`
                found tuple `(_, _)`

error[E0308]: mismatched types
   --> src/bin/two.rs:116:21
    |
115 |         match delta {
    |               ----- this expression has type `Coord`
116 |             (1,0) | (-1, 0) => {
    |                     ^^^^^^^ expected struct `Coord`, found tuple
    |
    = note: expected struct `Coord`
                found tuple `(_, _)`

error[E0308]: mismatched types
   --> src/bin/two.rs:120:13
    |
115 |         match delta {
    |               ----- this expression has type `Coord`
...
120 |             (0,-1) | (0,-2) => {
    |             ^^^^^^ expected struct `Coord`, found tuple
    |
    = note: expected struct `Coord`
                found tuple `(_, _)`

error[E0308]: mismatched types
   --> src/bin/two.rs:120:22
    |
115 |         match delta {
    |               ----- this expression has type `Coord`
...
120 |             (0,-1) | (0,-2) => {
    |                      ^^^^^^ expected struct `Coord`, found tuple
    |
    = note: expected struct `Coord`
                found tuple `(_, _)`

error[E0308]: mismatched types
   --> src/bin/two.rs:125:13
    |
115 |         match delta {
    |               ----- this expression has type `Coord`
...
125 |             (0,1) | (0,2) => {
    |             ^^^^^ expected struct `Coord`, found tuple
    |
    = note: expected struct `Coord`
                found tuple `(_, _)`

error[E0308]: mismatched types
   --> src/bin/two.rs:125:21
    |
115 |         match delta {
    |               ----- this expression has type `Coord`
...
125 |             (0,1) | (0,2) => {
    |                     ^^^^^ expected struct `Coord`, found tuple
    |
    = note: expected struct `Coord`
                found tuple `(_, _)`

error[E0308]: mismatched types
   --> src/bin/two.rs:117:57
    |
117 | ..._amphipod( ((which.0 as i32 + delta.0) as usize, (which.1 as i32 + delta.1) as usize), (0,1), false ));
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Coord`, found tuple
    |
    = note: expected struct `Coord`
                found tuple `(usize, usize)`

error[E0308]: mismatched types
   --> src/bin/two.rs:117:133
    |
117 | ... usize, (which.1 as i32 + delta.1) as usize), (0,1), false ));
    |                                                  ^^^^^ expected struct `Coord`, found tuple
    |
    = note: expected struct `Coord`
                found tuple `({integer}, {integer})`

error[E0308]: mismatched types
   --> src/bin/two.rs:118:57
    |
118 | ..._amphipod( ((which.0 as i32 + delta.0) as usize, (which.1 as i32 + delta.1) as usize), delta, false ));
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Coord`, found tuple
    |
    = note: expected struct `Coord`
                found tuple `(usize, usize)`

error[E0308]: mismatched types
   --> src/bin/two.rs:121:57
    |
121 | ..._amphipod( ((which.0 as i32 + delta.0) as usize, (which.1 as i32 + delta.1) as usize), (1,0), false ));
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Coord`, found tuple
    |
    = note: expected struct `Coord`
                found tuple `(usize, usize)`

error[E0308]: mismatched types
   --> src/bin/two.rs:121:133
    |
121 | ... usize, (which.1 as i32 + delta.1) as usize), (1,0), false ));
    |                                                  ^^^^^ expected struct `Coord`, found tuple
    |
    = note: expected struct `Coord`
                found tuple `({integer}, {integer})`

error[E0308]: mismatched types
   --> src/bin/two.rs:122:57
    |
122 | ..._amphipod( ((which.0 as i32 + delta.0) as usize, (which.1 as i32 + delta.1) as usize), (-1,0), false ));
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Coord`, found tuple
    |
    = note: expected struct `Coord`
                found tuple `(usize, usize)`

error[E0308]: mismatched types
   --> src/bin/two.rs:122:133
    |
122 | ...usize, (which.1 as i32 + delta.1) as usize), (-1,0), false ));
    |                                                 ^^^^^^ expected struct `Coord`, found tuple
    |
    = note: expected struct `Coord`
                found tuple `({integer}, {integer})`

error[E0308]: mismatched types
   --> src/bin/two.rs:123:57
    |
123 | ..._amphipod( ((which.0 as i32 + delta.0) as usize, (which.1 as i32 + delta.1) as usize), (0,-1), false ));
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Coord`, found tuple
    |
    = note: expected struct `Coord`
                found tuple `(usize, usize)`

error[E0308]: mismatched types
   --> src/bin/two.rs:123:133
    |
123 | ...usize, (which.1 as i32 + delta.1) as usize), (0,-1), false ));
    |                                                 ^^^^^^ expected struct `Coord`, found tuple
    |
    = note: expected struct `Coord`
                found tuple `({integer}, {integer})`

error[E0308]: mismatched types
   --> src/bin/two.rs:126:57
    |
126 | ..._amphipod( ((which.0 as i32 + delta.0) as usize, (which.1 as i32 + delta.1) as usize), (0,1), false ));
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Coord`, found tuple
    |
    = note: expected struct `Coord`
                found tuple `(usize, usize)`

error[E0308]: mismatched types
   --> src/bin/two.rs:126:133
    |
126 | ... usize, (which.1 as i32 + delta.1) as usize), (0,1), false ));
    |                                                  ^^^^^ expected struct `Coord`, found tuple
    |
    = note: expected struct `Coord`
                found tuple `({integer}, {integer})`

error[E0277]: `Coord` doesn't implement `Debug`
   --> src/bin/two.rs:128:64
    |
128 |             _ => panic!("Unexpected move_amphipod delta {:?}", delta)
    |                                                                ^^^^^ `Coord` cannot be formatted using `{:?}`
    |
    = help: the trait `Debug` is not implemented for `Coord`
    = note: add `#[derive(Debug)]` to `Coord` or manually `impl Debug for Coord`
    = note: this error originates in the macro `$crate::const_format_args` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider annotating `Coord` with `#[derive(Debug)]`
    |
6   | #[derive(Debug)]
    |

Some errors have detailed explanations: E0277, E0308, E0369.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `aoc` due to 30 previous errors
make: *** [Makefile:19: target/debug/two] Error 101
